import ada.demos.SafeIncrementalLearning._
import getSetEnsemble._
import getSetModel._
import ada.interface.AdaEnsemble
import ada.components.distributions.MeanDouble
import ada.ensembles.PassiveGreedyEnsemble
implicit val (encoder, decoder) = buildExportEnsembleParameters(ensemble)
val json = encoder(ensemble)
val ensemble2Option = json.as[PassiveGreedyEnsemble[Int, Array[Double], Double, MeanDouble]]
val ensemble2: PassiveGreedyEnsemble[Int, Array[Double], Double, MeanDouble] = ensemble2Option match {
    case(Right(ensembleX)) => ensembleX
    case(_) => throw new Exception("hello")
}

val data = Array(values.takeRight(5).toList:_*)
ensemble.actWithID(data, List())
ensemble2.actWithID(data, List())


val json2 = encoder(ensemble2)
require(json == json2)